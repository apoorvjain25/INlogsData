################################### NumPy ############################################

Import NumPy and play a bit with it. For that, we need to start the Python interactive shell.

>>> import numpy 
>>> numpy.version.full_version 

#########################################################

##Create Array

import numpy mylist = [1, 2, 3] 
myarray = numpy.array(mylist) 
print(myarray) 
print(myarray.shape)

##Output: [1 2 3] 
          (3,)

###########################################################

##Access Data

import numpy 
mylist = [[1, 2, 3], [3, 4, 5]] 
myarray = numpy.array(mylist) 
print(myarray) 
print(myarray.shape) 
print("First row: %s") % myarray[0] 
print("Last row: %s") % myarray[-1] 
print("Specific row and col: %s") % myarray[0, 2] 
print("Whole col: %s") % myarray[:, 2]

##Output: [[1 2 3] 
          [3 4 5]] 
          (2, 3) 
          First row: [1 2 3] 
          Last row: [3 4 5] 
          Specific row and col: 3 
          Whole col: [3 5]

###############################################################

##Arithmetic

import numpy 
myarray1 = numpy.array([2, 2, 2]) 
myarray2 = numpy.array([3, 3, 3]) 
print("Addition: %s") % (myarray1 + myarray2) 
print("Multiplication: %s") % (myarray1 * myarray2)

##Output: Addition: [5 5 5] 
          Multiplication: [6 6 6]

########## Shape manipulation #########

>>> n_array.ravel() 
[ 0  1  2  3  4  5  6  7  8  9 10 11] 

>>> n_array.shape = (6,2) 
>>> n_array 
[[ 0  1] 
[ 2  3] 
[ 4  5] 
[ 6  7] 
[ 8  9] 
[10 11]] 

>>> n_array.transpose() 
[[ 0  2  4  6  8 10] 
[ 1  3  5  7  9 11]]

################# Indexing and slicing ############# 

If you want to select a particular element of an array, it can be achieved using indexes:

>>> n_array[[ 0 , 0:3 ] 
[0 1 2]

>>> n_array[ 0 , : ] 
[0 1 2 3]

>>> n_array[ : , 1 ] 
[1 5 9] 

########################################### SciPy #######################################

 The complete namespace of NumPy is also accessible via SciPy. You can check this easily by comparing the function references of any base function;  for example:

>>> import scipy, numpy 

>>> scipy.version.full_version 
0.11.0 

>>> scipy.dot is numpy.dot
True 

